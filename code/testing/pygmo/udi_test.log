Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    exitcode = _main(fd, parent_sentinel)
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    prepare(preparation_data)
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    main_content = runpy.run_path(main_path,
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    mp_island.init_pool()
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    super().__init__(process_obj)
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    self._launch(process_obj)
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    _check_not_importing_main()
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
Traceback (most recent call last):
  File "<string>", line 1, in <module>
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
Traceback (most recent call last):
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
  File "<string>", line 1, in <module>
    exitcode = _main(fd, parent_sentinel)
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    _fixup_main_from_path(data['init_main_from_path'])
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    prepare(preparation_data)
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    _run_code(code, mod_globals, init_globals,
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
    main_content = runpy.run_path(main_path,
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    return _run_module_code(code, init_globals, run_name,
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
Traceback (most recent call last):
    exec(code, run_globals)
  File "<string>", line 1, in <module>
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    self._init(use_pool)
    mp_island._init_pool_impl(processes)
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    self._init(use_pool)
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    return _run_module_code(code, init_globals, run_name,
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    return Pool(processes, initializer, initargs, maxtasksperchild,
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island.init_pool()
    self._repopulate_pool()
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    self._popen = self._Popen(self)
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return self._repopulate_pool_static(self._ctx, self.Process,
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    return Popen(process_obj)
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    return self._repopulate_pool_static(self._ctx, self.Process,
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    prep_data = spawn.get_preparation_data(process_obj._name)
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._repopulate_pool()
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    raise RuntimeError('''
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    self._popen = self._Popen(self)
    raise RuntimeError('''
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data

    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    _check_not_importing_main()
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
    raise RuntimeError('''
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    self._popen = self._Popen(self)
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    _check_not_importing_main()
Traceback (most recent call last):
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _check_not_importing_main()
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    return Popen(process_obj)
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    super().__init__(process_obj)
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    main_content = runpy.run_path(main_path,
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    _run_code(code, mod_globals, init_globals,
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    exec(code, run_globals)
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    return self._repopulate_pool_static(self._ctx, self.Process,
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    mp_island.init_pool()
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    _fixup_main_from_path(data['init_main_from_path'])
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Pool(processes, initializer, initargs, maxtasksperchild,
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.    super().__init__(process_obj)

  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    return Popen(process_obj)
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    super().__init__(process_obj)
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    return Pool(processes, initializer, initargs, maxtasksperchild,
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    self._repopulate_pool()
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    return self._repopulate_pool_static(self._ctx, self.Process,
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    w.start()
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    self._popen = self._Popen(self)
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    mp_island.init_pool()
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
  File "<string>", line 1, in <module>
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    exitcode = _main(fd, parent_sentinel)
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    prepare(preparation_data)
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    return self._repopulate_pool_static(self._ctx, self.Process,
    exec(code, run_globals)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    prep_data = spawn.get_preparation_data(process_obj._name)
    my_island = pg.mp_island()
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    mp_island.init_pool()
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    exitcode = _main(fd, parent_sentinel)
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
Traceback (most recent call last):
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    my_island = pg.mp_island()
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    mp_island.init_pool()
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    self._popen = self._Popen(self)
    return self._repopulate_pool_static(self._ctx, self.Process,
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    pool = mp_ctx.Pool(processes=processes)
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    return Pool(processes, initializer, initargs, maxtasksperchild,
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    return _run_module_code(code, init_globals, run_name,
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
Traceback (most recent call last):
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    prepare(preparation_data)
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    main_content = runpy.run_path(main_path,
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    _check_not_importing_main()
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
    _check_not_importing_main()
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    exec(code, run_globals)
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    self._init(use_pool)
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Popen(process_obj)
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    self._init(use_pool)
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
Traceback (most recent call last):
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    main_content = runpy.run_path(main_path,
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    return _run_module_code(code, init_globals, run_name,
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    my_island = pg.mp_island()
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    _run_code(code, mod_globals, init_globals,
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    my_island = pg.mp_island()
    _run_code(code, mod_globals, init_globals,
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    return Pool(processes, initializer, initargs, maxtasksperchild,
    exec(code, run_globals)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    mp_island.init_pool()
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    pool = mp_ctx.Pool(processes=processes)
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    main_content = runpy.run_path(main_path,
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    self._init(use_pool)
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    mp_island.init_pool()
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    pool = mp_ctx.Pool(processes=processes)
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    return Pool(processes, initializer, initargs, maxtasksperchild,
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
Traceback (most recent call last):
    self._repopulate_pool()
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    w.start()
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
Traceback (most recent call last):
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
  File "<string>", line 1, in <module>
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exitcode = _main(fd, parent_sentinel)
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    main_content = runpy.run_path(main_path,
    self._launch(process_obj)
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    return Popen(process_obj)
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    prep_data = spawn.get_preparation_data(process_obj._name)
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
Traceback (most recent call last):
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    prepare(preparation_data)
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    _fixup_main_from_path(data['init_main_from_path'])
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    return self._repopulate_pool_static(self._ctx, self.Process,
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    _check_not_importing_main()
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    return Pool(processes, initializer, initargs, maxtasksperchild,
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    self._repopulate_pool()
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    super().__init__(process_obj)
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    _check_not_importing_main()
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    super().__init__(process_obj)
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
Traceback (most recent call last):
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    return _run_module_code(code, init_globals, run_name,
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
Traceback (most recent call last):
    mp_island.init_pool()
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return Pool(processes, initializer, initargs, maxtasksperchild,
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    mp_island._init_pool_impl(processes)
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    _run_code(code, mod_globals, init_globals,
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    exec(code, run_globals)
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
    exec(code, run_globals)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    return Popen(process_obj)
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    super().__init__(process_obj)
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    self._launch(process_obj)
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.    return self._repopulate_pool_static(self._ctx, self.Process,

  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
Traceback (most recent call last):
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    my_island = pg.mp_island()
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    return self._repopulate_pool_static(self._ctx, self.Process,
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    self._repopulate_pool()
    raise RuntimeError('''
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    w.start()
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    return Popen(process_obj)
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    _fixup_main_from_path(data['init_main_from_path'])
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    exitcode = _main(fd, parent_sentinel)
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    return Popen(process_obj)
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    self._repopulate_pool()
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 116, in spawn_main
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    exitcode = _main(fd, parent_sentinel)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 125, in _main
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    w.start()
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data

    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    prepare(preparation_data)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 236, in prepare
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    _fixup_main_from_path(data['init_main_from_path'])
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 288, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/Users/sean/Desktop/TUDelft/Thesis/Code/testing/pygmo/udi_test.py", line 6, in <module>
    my_island = pg.mp_island()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 119, in __init__
    self._init(use_pool)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 130, in _init
    mp_island.init_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 338, in init_pool
    mp_island._init_pool_impl(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_py_islands.py", line 315, in _init_pool_impl
    mp_island._pool, mp_island._pool_size = _make_pool(processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/site-packages/pygmo/_mp_utils.py", line 62, in _make_pool
    pool = mp_ctx.Pool(processes=processes)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 119, in Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 212, in __init__
    self._repopulate_pool()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 303, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/pool.py", line 326, in _repopulate_pool_static
    w.start()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/sean/opt/miniconda3/envs/tudat-space-dev/lib/python3.9/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
